{
  "evolution": {
    // The algorithm is biphasic, it runs for "phaseLengthGenerations" in exploratory mode with high mutation chances
    // and then switches to refinement mode with more conservative mutation rates.
    "phaseLengthGenerations": 5, // 100 overnight
    "populationSize": 100, // 1000 overnight
    "maxGeneration": 50, // 1000 overnight

    // Number of highest fitness individuals to keep intact per generation.
    "alphaCount": 1, // 3 overnight

    // When creating a new population for subsequent generations, the algorithm uses a tournament selection process.
    // It fills the generation by running a tournament selecting "tournamentSizeK" individuals randomly in the population,
    // and grabbing the highest fitness one as parentA. It then does the same thing for parentB. It then adds a cross-breed
    // of parentA and parentB to the population of the next generation.
    "tournamentSizeK": 4, // 5 overnight

    // Low diversity threshold. When reached a culling will occur to inject random designs.
    "lowDiversityThreshold": 0.55,

    // How many individual will be culled during a low diversity culling. Expressed as a % of the population size.
    "lowDiversityCullingRatio": 0.4,

    // A file containing a simple list of ERP code of reactors that will be injected in gen0 of the EvolutionEngine.
    // One ERP code per line. Ignores comment lines ('//', '#')
    "seedFile": "preload.txt"
  },
  "speciation": {
    // When comparing genomes for diversity checks, this threshold will be used to tell if two genomes are considered
    // the same species. Higher thresholds will trigger more "low diversity" injections and will.
    "speciesSimilarityThreshold": 0.85,

    // The weight of the fuel layout in the species comparison algorithm. High importance since this is the major
    // behavior driver in the layout composition.
    "fuelLayoutWeight": 0.85,

    // The weight of the other components layout in the species comparison algorithm. Low importance since a lot of
    // different non-fuel component layouts can give the same end results.
    "componentsLayoutWeight": 0.15
  },
  "fitness": {
    // This is the weight of the power production of a reactor on its fitness score
    "euOutputWeight":  1.0,

    // This is the weight of the efficiency of a reactor on its fitness score. Based on the "metaEfficiencyTarget" it will
    // give a bonus (sqrt bonus, not linear) when compared to a human designed "meta" reactor's efficiency.
    "fuelEfficiencyWeight": 0.3,

    // Based on the DESIGN #5: URANIUM v2 reactor on the GTNH wiki. Expressed in EU/t per fuel rods. Note that this is
    // not the highest power reactor design, but the most efficient.
    "metaFuelEfficiencyTarget": 600,

    // A broken component at the end of the simulation is a sign of an unstable reactor. Should be heavily penalized.
    "componentBrokenPenalty": 0.5,

    // Each HU of maxTemp decreases fitness score by heatPenaltyMultiplier
    "heatPenaltyMultiplier": 0.75
  },
  "mutation": {
    "refinement": {
      "probabilityFuelMutation": 0.002,
      "probabilityLayoutMutation": 0.08,
      "probabilityLayoutPerSlotMutation": 0.0001
    },
    "exploration": {
      "probabilityFuelMutation": 0.06,
      "probabilityLayoutMutation": 0.15,
      "probabilityLayoutPerSlotMutation": 0.025
    }
  },
  "components": {
    // List of valid component IDs that the GA is allowed to place in the reactor grid.
    // -1: Empty
    // 999: Placeholder for whatever the current fuel rod is for that genome.
    "valid": [
      -1,   // Empty
      999,  // Fuel Rod Placeholder
      //9,    // Heat Vent
      10,   // Advanced Heat Vent
      11,   // Reactor Heat Vent
      12,   // Component Heat Vent
      13,   // Overclocked Heat Vent
      //14,   // 10k Coolant Cell
      //15,   // 30k Coolant Cell
      //16,   // 60k Coolant Cell
      //17,   // Heat Exchanger
      18,   // Advanced Heat Exchanger
      19,   // Core Heat Exchanger
      20,   // Component Heat Exchanger
      //21,   // Reactor Plating
      //22,   // Heat Capacity Reactor Plating
      //23,   // Containment Reactor Plating
      //24,   // RSH Condensator
      //25,   // LZH Condensator
      //29,   // 60k Helium Coolant Cell
      //30,   // 180k Helium Coolant Cell
      //31,   // 360k Helium Coolant Cell
      //32,   // 60k NaK Coolant Cell
      //33,   // 180k NaK Coolant Cell
      //34,   // 360k NaK Coolant Cell
      35   // Iridium Neutron Reflector
      //55,   // 180k Space Coolant Cell
      //56,   // 360k Space Coolant Cell
      //57,   // 540k Space Coolant Cell
      //58    // 1080k Space Coolant Cell
    ]
  },
  "fuels": {
    // List of valid fuel rod component IDs that the GA can choose as the primary fuel for a genome.
    "valid": [
      1,    // Single Rod (Uranium)
      2,    // Dual Rod (Uranium)
      3,    // Quad Rod (Uranium)
      4,    // Single Rod (MOX)
      5,    // Dual Rod (MOX)
      6,    // Quad Rod (MOX)
      26,   // Single Rod (Thorium)
      27,   // Dual Rod (Thorium)
      28   // Quad Rod (Thorium)
      //36,   // Single Rod (Naquadah)
      //37,   // Dual Rod (Naquadah)
      //38,   // Quad Rod (Naquadah)
      //39,   // Single Rod (Coaxium)
      //40,   // Dual Rod (Coaxium)
      //41,   // Quad Rod (Coaxium)
      //42,   // Single Rod (Cesium)
      //43,   // Dual Rod (Cesium)
      //44,   // Quad Rod (Cesium)
      //45,   // Single Rod (Naquadah GTNH)
      //46,   // Dual Rod (Naquadah GTNH)
      //47,   // Quad Rod (Naquadah GTNH)
      //48,   // Single Rod (Naquadria)
      //49,   // Dual Rod (Naquadria)
      //50,   // Quad Rod (Naquadria)
      //51,   // Single Rod (Tiberium)
      //52,   // Dual Rod (Tiberium)
      //53,   // Quad Rod (Tiberium)
      //54    // The Core
    ]
  },
  "reactor": {
    "rowCount": 6,
    "colCount": 9
  }
}